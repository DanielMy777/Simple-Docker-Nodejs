import {
    sortParamSchema,
    pageParamSchema,
    limitParamSchema,
    tokenHeaderSchema,
    badTokenSchema,
    noTokenSchema,
    duplicateSchema,
    validationErrorSchema,
    notFoundSchema
} from './general.swagger';

const imageCreateSchema = (required: boolean) => {
    return {
        name: {
            type: 'string',
            example: 'alpine',
            description: 'Name of the image. (UNIQUE!)',
            unique: true,
            require: required
        },
        repository: {
            type: 'string',
            example: 'repos/alpine',
            description: 'Name of the image repository.',
            require: required
        },
        version: {
            type: 'string',
            example: '3.17.2',
            description: 'Name of the image version.',
            require: required
        },
        metadata: {
            type: 'object',
            description:
                'Metadata object for the image. May consist any object.',
            example: {
                suported: 'amd64',
                tags: ['linux', 'unix']
            }
        }
    };
};

const imageSchema = {
    type: 'object',
    properties: {
        _id: {
            type: 'string',
            example: '63f1f5039525e9e1165d9a16',
            description: 'Id of the image as set in the DB.'
        },
        updatedAt: {
            type: 'date',
            example: '2023-02-19T11:09:43.667Z',
            description: 'Last updated timestamp. Auto generated by server.'
        },
        ...imageCreateSchema(undefined)
    }
};

const getAllImagesDocument = {
    tags: ['Image'],
    summary: 'Gets all images',
    operationId: 'getAllImages',
    parameters: [
        sortParamSchema,
        limitParamSchema,
        pageParamSchema,
        tokenHeaderSchema
    ],
    responses: {
        '200': {
            description: 'Images in the DB',
            content: {
                'application/json': {
                    schema: {
                        type: 'object',
                        properties: {
                            status: {
                                type: 'string',
                                example: 'success',
                                description: 'Success indicator'
                            },
                            results: {
                                type: 'integer',
                                example: 1,
                                description: 'The amount of images in response'
                            },
                            data: {
                                type: 'object',
                                description: 'Images array',
                                properties: {
                                    images: {
                                        type: 'array',
                                        items: imageSchema
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        '401': noTokenSchema,
        '403': badTokenSchema
    }
};

const createImageDocument = {
    tags: ['Image'],
    summary: 'Creates a new image',
    operationId: 'createImage',
    parameters: [tokenHeaderSchema],
    requestBody: {
        description: 'Contents of the image to create.',
        required: true,
        content: {
            'application/json': {
                schema: {
                    type: 'object',
                    properties: imageCreateSchema(true)
                }
            }
        }
    },
    responses: {
        '201': {
            description: 'Newly created image',
            content: {
                'application/json': {
                    schema: {
                        type: 'object',
                        properties: {
                            status: {
                                type: 'string',
                                example: 'success',
                                description: 'Success indicator'
                            },
                            data: {
                                type: 'object',
                                description: 'Updated image',
                                properties: {
                                    image: imageSchema
                                }
                            }
                        }
                    }
                }
            }
        },
        '400': validationErrorSchema,
        '401': noTokenSchema,
        '403': badTokenSchema,
        '409': duplicateSchema
    }
};

const updateImageDocument = {
    tags: ['Image'],
    summary: 'Updates an image record',
    operationId: 'updateImage',
    parameters: [
        tokenHeaderSchema,
        {
            name: 'id',
            in: 'path',
            example: '63f27367c40dc26b80822da7',
            required: true,
            description:
                'The id of the image as stated on the _id field in the DB.',
            schema: {
                type: 'string'
            }
        }
    ],
    requestBody: {
        description:
            'Values you want to update. If none are given, only the update time will change.\n\n NOTE: metadata field will DEEP MERGE on update!',
        required: false,
        content: {
            'application/json': {
                schema: { type: 'object', properties: imageCreateSchema(false) }
            }
        }
    },
    responses: {
        '200': {
            description: 'Freshly updated image',
            content: {
                'application/json': {
                    schema: {
                        type: 'object',
                        properties: {
                            status: {
                                type: 'string',
                                example: 'success',
                                description: 'Success indicator'
                            },
                            data: {
                                type: 'object',
                                description: 'Updated image',
                                properties: {
                                    image: imageSchema
                                }
                            }
                        }
                    }
                }
            }
        },
        '400': validationErrorSchema,
        '401': noTokenSchema,
        '403': badTokenSchema,
        '404': notFoundSchema,
        '409': duplicateSchema
    }
};

export { getAllImagesDocument, createImageDocument, updateImageDocument };
