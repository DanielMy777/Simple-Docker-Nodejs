import {
    sortParamSchema,
    pageParamSchema,
    limitParamSchema,
    tokenHeaderSchema,
    badTokenSchema,
    noTokenSchema,
    validationErrorSchema
} from './general.swagger';

const missingIdErrorSchema = JSON.parse(JSON.stringify(validationErrorSchema));
missingIdErrorSchema.content[
    'application/json'
].schema.properties.message.example =
    'Invalid input data: [*] Image ID does not exist. Please choose an existing image ID to deploy.';

const deploymentCreateSchema = (required: boolean) => {
    return {
        imageId: {
            type: 'ObjectID',
            example: '63f109a7f07101e077463703',
            description:
                'Id of the image as stated in the DB under _id field. (as string)',
            require: required
        }
    };
};

const deploymentSchema = {
    type: 'object',
    properties: {
        _id: {
            type: 'string',
            example: '63f1f5039525e9e1165d9a16',
            description: 'Id of the deployment as set in the DB.'
        },
        updatedAt: {
            type: 'date',
            example: '2023-02-19T11:09:43.667Z',
            description: 'Last updated timestamp. Auto generated by server.'
        },
        ...deploymentCreateSchema(undefined)
    }
};

const getAllDeploymentsDocument = {
    tags: ['Deployment'],
    summary: 'Gets all deployments',
    operationId: 'getAllDeployments',
    parameters: [
        sortParamSchema,
        limitParamSchema,
        pageParamSchema,
        tokenHeaderSchema
    ],
    responses: {
        '200': {
            description: 'Deployments in the DB',
            content: {
                'application/json': {
                    schema: {
                        type: 'object',
                        properties: {
                            status: {
                                type: 'string',
                                example: 'success',
                                description: 'Success indicator'
                            },
                            results: {
                                type: 'integer',
                                example: 1,
                                description:
                                    'The amount of deployments in response'
                            },
                            data: {
                                type: 'object',
                                description: 'Deployments array',
                                properties: {
                                    deployments: {
                                        type: 'array',
                                        items: deploymentSchema
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        '401': noTokenSchema,
        '403': badTokenSchema
    }
};

const createDeploymentDocument = {
    tags: ['Deployment'],
    summary: 'Creates a new deployment',
    operationId: 'createDeployment',
    parameters: [tokenHeaderSchema],
    requestBody: {
        description: 'Object containing the image ID to deploy.',
        required: true,
        content: {
            'application/json': {
                schema: {
                    type: 'object',
                    properties: deploymentCreateSchema(true)
                }
            }
        }
    },
    responses: {
        '201': {
            description: 'Newly created Deployment',
            content: {
                'application/json': {
                    schema: {
                        type: 'object',
                        properties: {
                            status: {
                                type: 'string',
                                example: 'success',
                                description: 'Success indicator'
                            },
                            data: {
                                type: 'object',
                                description: 'Created deployment',
                                properties: {
                                    deployment: deploymentSchema
                                }
                            }
                        }
                    }
                }
            }
        },
        '400': missingIdErrorSchema,
        '401': noTokenSchema,
        '403': badTokenSchema
    }
};

const getCountOfDeploymentsDocument = {
    tags: ['Deployment'],
    summary: 'Gets the amount of deployments',
    operationId: 'countDeployments',
    parameters: [tokenHeaderSchema],
    responses: {
        '200': {
            description: 'Amount of deployments',
            content: {
                'application/json': {
                    schema: {
                        type: 'object',
                        properties: {
                            status: {
                                type: 'string',
                                example: 'success',
                                description: 'Success indicator'
                            },
                            data: {
                                type: 'object',
                                description: 'Deployment count',
                                properties: {
                                    count: {
                                        type: 'integer',
                                        example: 9
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        '401': noTokenSchema,
        '403': badTokenSchema
    }
};

export {
    getAllDeploymentsDocument,
    createDeploymentDocument,
    getCountOfDeploymentsDocument
};
